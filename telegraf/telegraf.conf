[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true
  
  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000
  
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000
  
  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"
  
  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"
  
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""
  
  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""
  
  ## Override default hostname, if empty use os.Hostname()
  hostname = "telegraf"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

[[inputs.ping]]
  interval = "60s"
  urls = ["hq-cucm-pub.abc.inc","hq-cucm-sub.abc.inc"]
  count = 3
  ping_interval = 1.0
  timeout = 10.0
  deadline = 30

[[inputs.snmp]]
  agent_host_tag = "source"
  agents = ["udp://hq-cucm-pub.abc.inc:161","udp://hq-cucm-sub.abc.inc:161"]
  version = 2
  community = "public"
  name = "snmp"
  
  [[inputs.snmp.field]]
    oid = "SNMPv2-MIB::sysName.0"
    name = "sysName"
    is_tag = true

  [[inputs.snmp.field]]
    oid = "RFC1213-MIB::sysUpTime.0"
    name = "uptime"
    
  [[inputs.snmp.field]]
    oid = "HOST-RESOURCES-MIB::hrSystemProcesses.0"
    
  [[inputs.snmp.field]]
    oid = "HOST-RESOURCES-MIB::hrMemorySize.0"

  [[inputs.snmp.table]]
    index_as_tag = true
    oid = "HOST-RESOURCES-MIB::hrProcessorTable"
  
  [[inputs.snmp.table]]
    index_as_tag = true
    oid = "HOST-RESOURCES-MIB::hrDeviceTable"
  
  [[inputs.snmp.table]]
    index_as_tag = true
    oid = "HOST-RESOURCES-MIB::hrStorageTable"
  
  [[inputs.snmp.table]]
    oid = "IF-MIB::ifTable"
    name = "interface"

[[outputs.influxdb_v2]]	
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ## urls exp: http://127.0.0.1:8086
  urls = ["http://influxdb2:8086"]
  
  ## Token for authentication.
  token = "${INFLUXDB_TOKEN}"
  
  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "${INFLUXDB_ORG}"
  
  ## Destination bucket to write into.
  bucket = "${INFLUXDB_TELEGRAF_BUCKET}"
  
  insecure_skip_verify = true